// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameN.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GamesN {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class GameN {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameN() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtnYW1lTi5wcm90bxIGZ2FtZXNOIiQKBFVzZXISDAoEbmFtZRgBIAEoCRIO", 
            "CgZwYXNzd2QYAiABKAkiGAoKU2Vzc2lvbl9JZBIKCgJpZBgBIAEoCSIZCgZS", 
            "ZXN1bHQSDwoHc3VjY2VzcxgBIAEoCSIwCgRHYW1lEgsKA2dpZBgBIAEoBRIM", 
            "CgRuYW1lGAIgASgJEg0KBXByaWNlGAMgASgFIiEKBkdhbWVJRBIKCgJpZBgB", 
            "IAEoBRILCgNnaWQYAiABKAUiQAoHR2FtZVVJRBILCgN1aWQYASABKAkSCwoD", 
            "Z0lEGAIgASgFEgwKBG5hbWUYAyABKAkSDQoFcHJpY2UYBCABKAUyqgIKDEdh", 
            "bWVzTGlicmFyeRIwCghHZXRHYW1lcxISLmdhbWVzTi5TZXNzaW9uX0lkGgwu", 
            "Z2FtZXNOLkdhbWUiADABEiwKCk1vZGlmeUdhbWUSDi5nYW1lc04uR2FtZUlE", 
            "GgwuZ2FtZXNOLkdhbWUiABIsCgdBZGRHYW1lEg8uZ2FtZXNOLkdhbWVVSUQa", 
            "Di5nYW1lc04uUmVzdWx0IgASLwoKRGVsZXRlR2FtZRIPLmdhbWVzTi5HYW1l", 
            "VUlEGg4uZ2FtZXNOLlJlc3VsdCIAEisKBUxvZ2luEgwuZ2FtZXNOLlVzZXIa", 
            "Ei5nYW1lc04uU2Vzc2lvbl9JZCIAEi4KBkxvZ291dBISLmdhbWVzTi5TZXNz", 
            "aW9uX0lkGg4uZ2FtZXNOLlJlc3VsdCIAQhgKEGlvLmdycGMuZXhhbXBsZXOi", 
            "AgNITFdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::GamesN.User), new[]{ "Name", "Passwd" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::GamesN.Session_Id), new[]{ "Id" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::GamesN.Result), new[]{ "Success" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::GamesN.Game), new[]{ "Gid", "Name", "Price" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::GamesN.GameID), new[]{ "Id", "Gid" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::GamesN.GameUID), new[]{ "Uid", "GID", "Name", "Price" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamesN.GameN.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    public User(User other) : this() {
      name_ = other.name_;
      passwd_ = other.passwd_;
    }

    public User Clone() {
      return new User(this);
    }

    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int PasswdFieldNumber = 2;
    private string passwd_ = "";
    public string Passwd {
      get { return passwd_; }
      set {
        passwd_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as User);
    }

    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Passwd != other.Passwd) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Passwd.Length != 0) hash ^= Passwd.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Passwd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Passwd);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Passwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passwd);
      }
      return size;
    }

    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Passwd.Length != 0) {
        Passwd = other.Passwd;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Passwd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Session_Id : pb::IMessage<Session_Id> {
    private static readonly pb::MessageParser<Session_Id> _parser = new pb::MessageParser<Session_Id>(() => new Session_Id());
    public static pb::MessageParser<Session_Id> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamesN.GameN.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Session_Id() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Session_Id(Session_Id other) : this() {
      id_ = other.id_;
    }

    public Session_Id Clone() {
      return new Session_Id(this);
    }

    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set {
        id_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Session_Id);
    }

    public bool Equals(Session_Id other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    public void MergeFrom(Session_Id other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Result : pb::IMessage<Result> {
    private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
    public static pb::MessageParser<Result> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamesN.GameN.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Result(Result other) : this() {
      success_ = other.success_;
    }

    public Result Clone() {
      return new Result(this);
    }

    public const int SuccessFieldNumber = 1;
    private string success_ = "";
    public string Success {
      get { return success_; }
      set {
        success_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Result);
    }

    public bool Equals(Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Success.Length != 0) hash ^= Success.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Success.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Success);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Success.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Success);
      }
      return size;
    }

    public void MergeFrom(Result other) {
      if (other == null) {
        return;
      }
      if (other.Success.Length != 0) {
        Success = other.Success;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Success = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Game : pb::IMessage<Game> {
    private static readonly pb::MessageParser<Game> _parser = new pb::MessageParser<Game>(() => new Game());
    public static pb::MessageParser<Game> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamesN.GameN.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Game() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Game(Game other) : this() {
      gid_ = other.gid_;
      name_ = other.name_;
      price_ = other.price_;
    }

    public Game Clone() {
      return new Game(this);
    }

    public const int GidFieldNumber = 1;
    private int gid_;
    public int Gid {
      get { return gid_; }
      set {
        gid_ = value;
      }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int PriceFieldNumber = 3;
    private int price_;
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Game);
    }

    public bool Equals(Game other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gid != other.Gid) return false;
      if (Name != other.Name) return false;
      if (Price != other.Price) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Gid != 0) hash ^= Gid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Gid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Gid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Price != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Price);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Gid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      return size;
    }

    public void MergeFrom(Game other) {
      if (other == null) {
        return;
      }
      if (other.Gid != 0) {
        Gid = other.Gid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Gid = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameID : pb::IMessage<GameID> {
    private static readonly pb::MessageParser<GameID> _parser = new pb::MessageParser<GameID>(() => new GameID());
    public static pb::MessageParser<GameID> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamesN.GameN.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GameID() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GameID(GameID other) : this() {
      id_ = other.id_;
      gid_ = other.gid_;
    }

    public GameID Clone() {
      return new GameID(this);
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int GidFieldNumber = 2;
    private int gid_;
    public int Gid {
      get { return gid_; }
      set {
        gid_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GameID);
    }

    public bool Equals(GameID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Gid != other.Gid) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Gid != 0) hash ^= Gid.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Gid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Gid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gid);
      }
      return size;
    }

    public void MergeFrom(GameID other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Gid != 0) {
        Gid = other.Gid;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Gid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameUID : pb::IMessage<GameUID> {
    private static readonly pb::MessageParser<GameUID> _parser = new pb::MessageParser<GameUID>(() => new GameUID());
    public static pb::MessageParser<GameUID> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamesN.GameN.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GameUID() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GameUID(GameUID other) : this() {
      uid_ = other.uid_;
      gID_ = other.gID_;
      name_ = other.name_;
      price_ = other.price_;
    }

    public GameUID Clone() {
      return new GameUID(this);
    }

    public const int UidFieldNumber = 1;
    private string uid_ = "";
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int GIDFieldNumber = 2;
    private int gID_;
    public int GID {
      get { return gID_; }
      set {
        gID_ = value;
      }
    }

    public const int NameFieldNumber = 3;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int PriceFieldNumber = 4;
    private int price_;
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GameUID);
    }

    public bool Equals(GameUID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (GID != other.GID) return false;
      if (Name != other.Name) return false;
      if (Price != other.Price) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (GID != 0) hash ^= GID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (GID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (GID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      return size;
    }

    public void MergeFrom(GameUID other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.GID != 0) {
        GID = other.GID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            GID = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
